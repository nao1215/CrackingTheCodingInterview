/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.Objects;

public class App {
    public static void main(String[] args) {
        System.out.println(replaceSpace(" White Space ", 13));
    }

    /* [自作の解答]
     * 空白の数を数えてから、char配列のサイズを求める。
     * 配列のサイズは、"元々の文字列長 + (空白数 * 2)"である。
     * 計算量は、log(c)。cは文字数。
     *
     * 今回の解答はループを回して空白を数えたが、別解として以下が考えられる。
     * ① Apache Commonを使う。
     *    StringUtils.countMatches(str, " ");
     * ② Spring Frameworkを使う。
     *    org.springframework.util.StringUtils.countOccurrencesOf(str, " ");
     * ③ replace で、「元の文字列」と「空白除去後の文字列」の差を取る。
     *    str.length() - str.replace(" ", "").length();
     *
     *  書籍の解答は、自作解答と考え方がほぼ一緒だが、
     *  文字列の最後尾から先頭に向かって編集する。
     *  この方法のメリットは、
     *   ・バッファの後ろに追加バッファを加える事ができる点
     *   ・編集時に文字列を上書きする事がない点
     */
    public static String replaceSpace(String orgStr, int strLength) {
        final char WHITE_SPACE = ' ';
        if(Objects.isNull(orgStr)) {
            return null;
        }

        if (strLength == 0) {
            return "";
        }

        /* 空白の数をカウント */
        int count = 0;
        for(char x: orgStr.toCharArray()){
            if(x == WHITE_SPACE){
                count++;
            }
        }

        /* 空白を%20に置換 */
        char[] chars = new char[strLength + count*2];
        char[] x = orgStr.toCharArray();
        for(int i=0, index=0; i < strLength; i++, index++) {
            if(x[i] == WHITE_SPACE){
                chars[index] = '%';
                chars[index+1] = '2';
                chars[index+2] = '0';
                index = index+2;
            } else {
                chars[index] = x[i];
            }
        }
        return new String(chars);
    }
}
