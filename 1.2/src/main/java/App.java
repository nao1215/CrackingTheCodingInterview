/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.Arrays;
import java.util.Objects;

// 2つの文字列が与えられた時、片方がもう片方の並べ替えになっているかを決定するメソッド
public class App {
    public static void main(String[] args) {
        System.out.printf("%sと%sはアナグラム：%s\n",
        "test", "ttes", isAnagram("test", "ttes"));
        System.out.printf("%sと%sはアナグラム：%s\n",
        "tet", "tet", isAnagram("tet", "tet"));
        System.out.printf("%sと%sはアナグラム：%s\n",
        "あいう", "いうあ", isAnagram("あいう", "いうあ"));
        System.out.printf("%sと%sはアナグラム：%s\n",
        "123456789", "987654321", isAnagram("123456789", "987654321"));
    }

    /* [自作の回答]
     * 引数で与えた文字列str1、str2を比較し、
     * str1がstr2のアナグラムである場合はtrue、アナグラムではない場合はfalseを返す。
     *
     * 計算量はO(nlog(n))。
     * 総計算量は、文字列のソート部（sortStringInAsc()）の計算量に依存するが、
     * 今回はJava標準のソートメソッドを用いているため、O(nlog(n))。
     *  （本質的な問題の解き方ではない気がする）
     */
    public static boolean isAnagram(String str1, String str2) {
        if(Objects.isNull(str1) || Objects.isNull(str2)) {
            return false;
        }

        // 文字数が一致しない場合は、アナグラムではないとみなす
        if(str1.length() != str2.length()) {
            return false;
        }

        String sortedStr1 = sortStringInAsc(str1);
        String sortedStr2 = sortStringInAsc(str2);

        if(sortedStr1.equals(sortedStr2)) {
            return true;
        }
        return false;
    }

    /* 文字列を昇順ソートする。
     * Javaのドキュメントより、計算量がO(nlog(n))とされている。
     *
     * [引用]
     * ソート・アルゴリズムは、Vladimir Yaroslavskiy氏、Jon Bentley氏、
     * およびJoshua Bloch氏によるDual-Pivot Quicksortです。このアルゴリ
     * ズムは、ほかのクイックソート・アルゴリズムではnの2乗のパフォーマ
     * ンスに低下させる多くのデータ・セットで、O(n log(n))のパフォーマ
     * ンスを提供し、一般的に従来の(1ピボットの) Quicksortの実装よりも高速です。
     * 出典URL：https://docs.oracle.com/javase/jp/8/docs/api/java/util/Arrays.html#sort-char:A-
    */
    public static String sortStringInAsc(String str) {
        if(Objects.isNull(str)) {
            return null;
        }

        if((str.equals("")) || (str.length() ==1)) {
            return str;
        }

        char[] chars = str.toCharArray();
        Arrays.sort(chars);
        String sortedStr = new String(chars);
        return sortedStr;
    }
}
